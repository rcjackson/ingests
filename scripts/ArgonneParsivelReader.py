import numpy as np
import pytz

from datetime import datetime, timedelta
from pydsd.DropSizeDistribution import DropSizeDistribution

#record_format = {"13": 6, "21": 10, "20": 8, "18": 1, "25": 3, "17": 4, "16": 4, 
#                 "27": 3, "28": 3, "12": 3, "01": 8, "02": 7, "07": 6,
#                 "11": 5, "60": 8, "90": 223, "91": 223, "93": 4095}


def read_adm_parsivel(filename):
    """
    Takes a filename pointing to an Argonne parsivel raw file and returns
    a drop size distribution object.

    Usage:
    dsd = read_parsivel(filename)

    Returns:
    DropSizeDistrometer object

    """
    reader = ArgonneParsivelReader(filename)
    dsd = DropSizeDistribution(reader)
    dsd.fields["drop_spectrum"] = reader.fields["filtered_raw_matrix"]
    dsd.spectrum_fall_velocity = reader.spectrum_fall_velocity
    return dsd


def var_to_dict(standard_name, data, units, long_name):
    """
    Convert variable information to a dictionary.
    """
    d = {}
    d["data"] = data[:]
    d["units"] = units
    d["long_name"] = long_name
    d["standard_name"] = standard_name
    return d

class ArgonneParsivelReader(object):
    """
    ParsivelReader class takes takes a filename as it's only argument(for now).
    This should be a parsivel raw datafile(output from the parsivel).

    """

    def __init__(self, filename):
        self.filename = filename
        self.rain_rate = []
        self.Z = []
        self.num_particles = []
        self.num_particles_validated = []
        self.rain_accumulation = []
        self._base_time = []

        self.nd = []
        self.vd = []
        self.raw = []
        self.code = []
        self.time = []
        self.sensor_serial_num = []
        self.sensor_time = []
        
        self.sensor_status = []
        self.error_code = []
        self.power_supply_voltage = []
        self.sensor_head_heating_current = []
        self.temperature_right_head = []
        self.temperature_left_head = []
        self.sensor_heating_temperature = []
        
        self.ndt = []
        
        self.pcm = np.reshape(self.pcm_matrix, (32, 32))

        self._read_file()
        self._prep_data()

        self.bin_edges = np.hstack(
            (0, self.diameter["data"] + np.array(self.spread["data"]) / 2)
        )

        self.bin_edges = var_to_dict(
            "bin_edges", self.bin_edges, "mm", "Bin Edges"
        )

        self._apply_pcm_matrix()
    
    def _read_file(self):
        #Timestamp (UTC);	Sensor Serial Num (%13);	Sensor Date (%21);	Sensor Time (%20);	Sensor Status (%18);	Error Code    (%25);	Power #Supply Voltage (%17);	Sensor Head Heating Current (%16);	Temperature in the right sensor head (%27);	Temperature in the left sensor #head (%28);	Sensor Heating Temperature (%12);	Rain Intensity (%01);	Rain Amount Accumulated (%02);	Radar Reflectivity (%07);	#Number of Particles Validated (%11);	Number of Particles Detected (%60);	N(d) (%90);	v(d) (%91);	Raw Data (%93)

         
        with open(self.filename) as f:
            line1 = f.readline()
            line2 = f.readline()
            for file_line in f:
                
                if file_line == "":
                    continue
                split_string = file_line.split(";")
                self.time.append(np.datetime64(split_string[0]))
                self.sensor_serial_num = int(split_string[1])
                sensor_date = split_string[2]
                sensor_date = datetime.strptime(sensor_date, '%d.%m.%Y').strftime("%Y-%m-%d")
                sensor_time = split_string[3]
                self.sensor_time.append(np.datetime64(f"{sensor_date}T{sensor_time}"))
                self.sensor_status.append(int(split_string[4]))
                self.error_code.append(int(split_string[5]))
                self.power_supply_voltage.append(float(split_string[6]))
                self.sensor_head_heating_current.append(float(split_string[7]))
                self.temperature_right_head.append(int(split_string[8]))
                self.temperature_left_head.append(int(split_string[9]))
                self.sensor_heating_temperature.append(int(split_string[10]))
                self.rain_rate.append(float(split_string[11]))
                self.rain_accumulation.append(float(split_string[12]))
                self.Z.append(float(split_string[13]))
                self.num_particles_validated.append(int(split_string[14]))
                self.num_particles.append(int(split_string[15]))
                nd_array = [float(x) for x in split_string[16:48]]
                self.nd.append(nd_array)
                vd_array = [float(x) for x in split_string[48:80]]
                self.vd.append(vd_array)
                raw_array = [float(x) for x in split_string[80:1104]]
                self.raw.append(raw_array)
              
                         
    def get_sec(self, s):
        return int(s[0]) * 3600 + int(s[1]) * 60 + int(s[2])
    
    def _apply_pcm_matrix(self):
        """ Apply Data Quality matrix from Ali Tokay
        Returns: None

        """
        self.filtered_raw_matrix = np.ndarray(
            shape=(len(self.raw), 32, 32), dtype=float
        )
        for i in range(len(self.raw)):
            self.filtered_raw_matrix[i] = np.multiply(
                self.pcm, np.reshape(self.raw[i], (32, 32))
            )
        self.fields["filtered_raw_matrix"] = var_to_dict(
            "Filtered raw counts using Tokay method",
            np.ma.masked_equal(self.filtered_raw_matrix, -9.999),
            "",
            "Filtered raw counts",
        )
        self.fields["filtered_raw_matrix"]["data"].set_fill_value(0)
        
    def _prep_data(self):
        self.fields = {}

        self.fields["rain_rate"] = var_to_dict(
            "Rain rate", np.ma.array(self.rain_rate), "mm/h", "Rain rate"
        )
        self.fields["reflectivity"] = var_to_dict(
            "Reflectivity",
            np.ma.masked_equal(self.Z, -9.999),
            "dBZ",
            "Equivalent reflectivity factor",
        )
        self.fields["Nd"] = var_to_dict(
            "Nd",
            np.ma.masked_equal(10**np.array(self.nd), np.power(10, -9.999)),
            "m^-3 mm^-1",
            "Liquid water particle concentration",
        )
        self.fields["Nd"]["data"].set_fill_value(0)
        
        len_raw = len(self.raw)
        self.fields["raw"] = var_to_dict(
            "Raw",
            np.reshape(np.array(self.raw), (len_raw, 32, 32)).sum(axis=1),    
            "",
            "Raw data",
        )
        self.fields["num_particles"] = var_to_dict(
            "Number of Particles",
            np.ma.array(self.num_particles),
            "",
            "Number of particles",
        )
        self.fields["num_particles_validated"] = var_to_dict(
            "Number of Particles validated",
            np.ma.array(self.num_particles_validated),
            "",
            "Number of particles validated",
        )
        self.fields["sensor_status"] = var_to_dict(
            "Sensor status",
            np.ma.array(self.sensor_status),
            "See Chapter 12.1",
            "Sensor status",
        )
        self.fields["error_code"] = var_to_dict(
            "Error code",
            np.ma.array(self.error_code),
            "",
            "Error code",
        )
        self.fields["power_supply_voltage"] = var_to_dict(
            "Power supply voltage",
            np.ma.array(self.power_supply_voltage),
            "V",
            "Power supply voltage",
        )
        self.fields["sensor_head_heating_current"] = var_to_dict(
            "Sensor head heating current",
            np.ma.array(self.sensor_head_heating_current),
            "A",
            "Sensor head heating current",
        )
        self.fields["sensor_heating_temperature"] = var_to_dict(
            "Sensor heating temperature",
            np.ma.array(self.sensor_heating_temperature),
            "degC",
            "Sensor heating temperature",
        )
        self.fields["temperature_right_head"] = var_to_dict(
            "Temperature right head",
            np.ma.array(self.temperature_right_head),
            "K",
            "Temperature right head",
        )
        self.fields["temperature_left_head"] = var_to_dict(
            "Temperature right head",
            np.ma.array(self.temperature_left_head),
            "K",
            "Temperature left head",
        )
        
        self.spectrum_fall_velocity = var_to_dict(
            "Fall velocity spectra",
            np.array(
                self.vd
            ),  
            "m/s",
            "Fall velocity spectra",
        )
        self.fields["sensor_time"] = var_to_dict(
            "Sensor time",
            np.array(
                self.sensor_time, dtype='datetime64[s]'
            ), 
            "",
            "Sensor time",
        )

        self.time = {
            "data": np.array(self.time, dtype='datetime64[s]'),
            "units": "seconds since 1970-1-1 00:00:00+0:00",
            "title": "Time",
            "full_name": "Native file time",
        }
            

    def _get_epoch_time(self):
        """
        Convert the time to an Epoch time using package standard.
        """
        time_unaware = np.array(
            [
                self._base_time[i] + timedelta(seconds=self.time[i])
                for i in range(0, len(self.time))
            ]
        )
        epoch = datetime.utcfromtimestamp(0)
        time_secs = [(timestamp - epoch).total_seconds() for timestamp in time_unaware]

        eptime = {
            "data": time_secs,
            "units": "seconds since 1970-1-1 00:00:00+0:00",
            "title": "Time",
            "long_name": "time",
        }
        return eptime

    diameter = var_to_dict(
        "diameter",
        np.array(
            [
                0.06,
                0.19,
                0.32,
                0.45,
                0.58,
                0.71,
                0.84,
                0.96,
                1.09,
                1.22,
                1.42,
                1.67,
                1.93,
                2.19,
                2.45,
                2.83,
                3.35,
                3.86,
                4.38,
                4.89,
                5.66,
                6.7,
                7.72,
                8.76,
                9.78,
                11.33,
                13.39,
                15.45,
                17.51,
                19.57,
                22.15,
                25.24,
            ]
        ),
        "mm",
        "Particle diameter of bins",
    )

    spread = var_to_dict(
        "spread",
        [
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.129,
            0.257,
            0.257,
            0.257,
            0.257,
            0.257,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            1.030,
            1.030,
            1.030,
            1.030,
            1.030,
            2.060,
            2.060,
            2.060,
            2.060,
            2.060,
            3.090,
            3.090,
        ],
        "mm",
        "Bin size spread of bins",
    )

    velocity = var_to_dict(
        "velocity",
        np.array(
            [
                0.05,
                0.15,
                0.25,
                0.35,
                0.45,
                0.55,
                0.65,
                0.75,
                0.85,
                0.95,
                1.1,
                1.3,
                1.5,
                1.7,
                1.9,
                2.2,
                2.6,
                3,
                3.4,
                3.8,
                4.4,
                5.2,
                6.0,
                6.8,
                7.6,
                8.8,
                10.4,
                12.0,
                13.6,
                15.2,
                17.6,
                20.8,
            ]
        ),
        "m s^-1",
        "Terminal fall velocity for each bin",
    )

    v_spread = [
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.1,
        0.2,
        0.2,
        0.2,
        0.2,
        0.2,
        0.4,
        0.4,
        0.4,
        0.4,
        0.4,
        0.8,
        0.8,
        0.8,
        0.8,
        0.8,
        1.6,
        1.6,
        1.6,
        1.6,
        1.6,
        3.2,
        3.2,
    ]

    pcm_matrix = (
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    )  
